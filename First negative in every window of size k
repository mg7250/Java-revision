class Compute {
    
    public long[] printFirstNegativeInteger(long A[], int N, int K)
    {
        long[] res=new long[N-K+1];
        Queue<Long> tem=new LinkedList<>();
        int i=0;
        int j=0;
        int m=0;
        while(j<N){
            if(A[j]<0)
            tem.add(A[j]);
           if((j-i+1)<K){
                j++;
                
           }
           else if((j-i+1)==K){
               if(!tem.isEmpty()){
                   if(A[i]==tem.peek())
                   res[m]=tem.poll();
                   else
                   res[m]=tem.peek();
               }
               else{
                   res[m]=0;
                   
               }
               m++;
               i++;
               j++;
           }
        }
        return res;
    }class Compute {
    
    public long[] printFirstNegativeInteger(long A[], int N, int K)
    {
        long[] res=new long[N-K+1];
        Queue<Long> tem=new LinkedList<>();
        int i=0;
        int j=0;
        int m=0;
        while(j<N){
            if(A[j]<0)
            tem.add(A[j]);
           if((j-i+1)<K){
                j++;
                
           }
           else if((j-i+1)==K){
               if(!tem.isEmpty()){
                   if(A[i]==tem.peek())
                   res[m]=tem.poll();
                   else
                   res[m]=tem.peek();
               }
               else{
                   res[m]=0;
                   
               }
               m++;
               i++;
               j++;
           }
        }
        return res;
    }
}
